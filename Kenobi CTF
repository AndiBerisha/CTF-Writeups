This room will cover accessing a Samba share, manipulating a vulnerable version of proftpd to gain initial access and escalate your privileges to root via an SUID binary

Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.

################################################################################################################################################################################################################################################################################

#TASK 1#
- Make sure youre connected to the machine (no answer needed).

- How many ports are open? (7).
Scan the target machine using a tool like nmap to discover open ports and services
This command will scan all ports and provide information about the services running.
Identify any interesting services, such as SSH, HTTP, and other open ports. to do this we will run the nmap command as followed

     nmap -sC -sV <MACHINE_IP>

This will show us a bunch of open ports and a variety of services such as FTP, SSH, HTTP, SMB and RPC.
##KEEP NOTE## the rooms author did not take into consideration non-standard high port numbers, and therefore only 
21, 22, 80, 111, 139, 445, and 2049 are counted. Making it 7 ports open

we can also see that SMB service is available and we can enumerate with that.

################################################################################################################################################################################################################################################################################

#Task 2 â€“ Enumerating Samba for Shares#

SMB runs on ports 139 and 445, and is a common enumeration and exploitation path.

we can do that by using this command.
nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse MACHINE_IP

after using that what we find is There are three shares: IPC$, anonymous, and print$. The IPC$ share is used for Inter Proces Communication by using RPC. 
The anonymous share on the other hand is more interesting as it can store files, and in this case it allows for READ/WRITE access for anonymous users

/////Using the nmap command above, how many shares have been found? (3)

once you connnect to the machine by using the smbclient command 
smbclient //<ip>/anonymous

once you run the command you can use the command 
ls 
to view what is listed which gives you the next answer

/////list the files on the share. What is the file can you see? (log.txt)

You can recursively download the SMB share too. Submit the username and password as nothing.

smbget -R smb://MACHINE_IP/anonymous

Open the file on the share. There is a few interesting things found.

Information generated for Kenobi when generating an SSH key for the user
Information about the ProFTPD server.

/////What port is FTP running on? (21) 

Your earlier nmap port scan will have shown port 111 running the service rpcbind. This is just a server that converts remote procedure call (RPC) program number into universal addresses. 
When an RPC service is started, it tells rpcbind the address at which it is listening and the RPC program number its prepared to serve. 

In our case, port 111 is access to a network file system. Lets use nmap to enumerate this.

nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount MACHINE_IP

/////What mount can we see? (/var)

################################################################################################################################################################################################################################################################################

#TASK 3 - Gain Initial Acess With ProFtpd#

ProFtpd is a free and open-source FTP server, compatible with Unix and Windows systems. Its also been vulnerable in the past software versions.


/////Lets get the version of ProFtpd. Use netcat to connect to the machine on the FTP port. What is the version? (1.3.5)

Enter the command 

nc <target ip> 21


We can use searchsploit to find exploits for a particular software version.

Searchsploit is basically just a command line search tool for exploit-db.com.

/////How many exploits are there for the ProFTPd running? (4)

You should have found an exploit from ProFtpd's mod_copy module. 

The mod_copy module implements SITE CPFR and SITE CPTO commands, which can be used to copy files/directories from one place to another on the server. 
Any unauthenticated client can leverage these commands to copy files from any part of the filesystem to a chosen destination.

We know that the FTP service is running as the Kenobi user (from the file on the share) and an ssh key is generated for that user.

We're now going to copy Kenobi's private key using SITE CPFR and SITE CPTO commands.

We knew that the /var directory was a mount we could see (task 2, question 4). So we've now moved Kenobi's private key to the /var/tmp directory.

Lets mount the /var/tmp directory to our machine

mkdir /mnt/kenobiNFS
mount MACHINE_IP:/var /mnt/kenobiNFS
ls -la /mnt/kenobiNFS

We now have a network mount on our deployed machine! We can go to /var/tmp and get the private key then login to Kenobi's account.

/////What is Kenobi's user flag (/home/kenobi/user.txt)?
d0b0f3f53b6caa532a83915e19224899

################################################################################################################################################################################################################################################################################

#Task 4 - Privilege Escalation with Path Variable Manipulation#


SUID bits can be dangerous, some binaries such as passwd need to be run with elevated privileges (as its resetting your password on the system), however other custom files could that have the SUID bit can lead to all sorts of issues.

To search the a system for these type of files run the following: find / -perm -u=s -type f 2>/dev/null

/////What file looks particularly out of the ordinary? (/usr/bin/menu)

Run the binary, how many options appear? (3)

Strings is a command on Linux that looks for human readable strings on a binary.

This shows us the binary is running without a full path (e.g. not using /usr/bin/curl or /usr/bin/uname).

As this file runs as the root users privileges, we can manipulate our path gain a root shell.

We copied the /bin/sh shell, called it curl, gave it the correct permissions and then put its location in our path. 
This meant that when the /usr/bin/menu binary was run, its using our path variable to find the "curl" binary.. Which is actually a version of /usr/sh, as well as this file being run as root it runs our shell as root!

/////What is the root flag (/root/root.txt)?

177b3cd8562289f37382721c28381f02

